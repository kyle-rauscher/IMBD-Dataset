{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Analysis of Streaming Services\n",
        "\n",
        "# BSAN 6030 - Programming for Data Mangement\n",
        "\n",
        "# Michael Soto, Kyle Rauscher, and Michael Matsheza\n",
        "\n",
        "# LMU College of Business Administration\n",
        "\n",
        "# msoto13@lion.lmu.edu, krausche@lion.lmu.edu, mmatshez@lion.lmu.edu\n"
      ],
      "metadata": {
        "id": "bZyB0-Xtk3Fv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Executive Summary\n",
        "The analysis in this report aims to answer the question about how to launch a successful streaming service business model. We are looking to help out our client, Netflix, launch a successful redesign of their content and business strategy. We looked to answer a couple key questions in order to achieve our goal of increasing the subscriptions and revenue for the company. We first looked at the streaming service as a whole, and gathered data from the top four services; Netflix, Hulu, Disney, and Amazon. We then merged these 4 datasets with 3 IMDB datasets that had millions of records to further enhance our analysis. \n",
        "Our merge allowed us to look at measures such as average rating and number of votes. We decided to look into the difference between these measures in relation to each of the four streaming services, in hopes of finding recommendations for genres and types of contents that Netflix should focus on. We gathered our 7 datasets from Kaggle and we concluded it was perfect for analysis as it included movie/streaming data stemming back to the 1920s. We were able to clean out columns we deemed unnecessary for our analysis and get rid of most of the null or duplicate data. We created an IMDB score column, which is a calculation of the product of number of votes and Average Rating. In addition, we wanted to extract all of the unique movies and ensure that all sequels were being categorized as its own film. We also created dummy columns for each of the genres because the original Genre column had a list of all the genres each content type was. \n",
        "After we cleaned and arranged all of our data, our next step was to create meaningful analysis to improve the content types, genres, and runtimes of Netflix's content. We discovered that TV series, short films, and TV movies had the highest average rating among all services, and recommended that Netflix focuses its efforts on creating these types of content to improve their average ratings and gain a competitive advantage over their rivals. We also found that Netflix had the most amount of votes(clicks) on its site, but had the second lowest amount of average votes, which shows that Netflix must spend more resources on creating better quality content to catch up to Disney and Hulu. Moving on to our next question, we concluded that the top grossing genres are Comedy and Drama, so Netflix must continue to develop quality content in these genres, while also creating content in their niche genres of crime and documentary . Further analysis showed that Netflix has produced the most content in these two genres, but their ratings were lower compared to their rivals, likely because of their binge-content release model. \n",
        "Lastly, we also discovered a relationship between runtime and IMDB score, and learned that higher IMDB scores were accomplished when runtimes were around 100-120 minutes. Based on our research and findings, we suggest that our client focuses on creating TV series, movies, and short films in the genres of crime and documentary with runtimes between 100 and 120, while focusing on the quality of films that will drive the average rating and IMDB scores for Netflix content, which will lead to more subscribers and higher revenue."
      ],
      "metadata": {
        "id": "4L7lNwL0lGeU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Introduction\n",
        "We are a group of Business Analytics consultants who have been tasked with providing recommendations on which content types and genres Netflix should focus on creating more of. Netflix is one of the largest media companies in the world and is known for its digital transformation of the film and entertainment industry. Recently, they have faced some economic challenges as subscriptions numbers have begun to decrease as they face competition from companies such as Hulu, Amazon, and Disney. Our client wants to improve their quality of their content to improve their ratings, clicks, and subscriptions to their streaming service. The important questions that we hoped to answer for Netflix was which content types and genres of content to create while using measures such as average rating, IMDB scores, and number of votes to support our recommendations. We wanted to do this by comparing data from their biggest competitors, along with garnering quantitative measures from IMDB. We wanted to analyze the average rating and number of votes by each of the streaming platforms along with each genre. We also created our own measures and columns to find relationships between the different measures in the datasets. In order to help Netflix improve their ratings and regain lost subscribers, we need to solve these questions. We are confident that our analysis and recommendations will accomplish this and separate Netflix from its competitors. "
      ],
      "metadata": {
        "id": "YjY9zdV7pyWd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Main Content and Analysis"
      ],
      "metadata": {
        "id": "Hh6gipjDqx8_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##***Methodology***"
      ],
      "metadata": {
        "id": "enMQRcUrq5Sv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###***Data Cleaning and Merging***"
      ],
      "metadata": {
        "id": "lNUl6fWjn3T9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "To begin our data cleaning, first looked at the four datasets that were extracted from Kaggle. The first step was to first create a column on each of the data files listing the streaming service this was on. Addionally we then created another column that was a combination of the streaming service, and the movie ID of that particular dataset, leaving us with Streaming ID (ex. Disney01, Netflix20, Hulu105, etc.). This now gave four seperate sheets with a list of what movies were listed on each streaming platform. \n",
        "\n",
        "For the next step in the project, for easability of use, we looked to combine the four datasets into one single data file. Fortunatelt, these four were found to be identical in their overall shape. For the sake of combining, we preformed a concatenation which placed all of the data under the same column name. This completed the creation of our Kaggle dataset."
      ],
      "metadata": {
        "id": "zUzgdiD1nu-k"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "disney_df = pd.read_csv('disney_plus_titles.csv', na_values = ['na','NA'])\n",
        "hulu_df = pd.read_csv('hulu_titles.csv', na_values = ['na','NA'])\n",
        "netflix_df = pd.read_csv('netflix_titles.csv', na_values = ['na','NA'])\n",
        "amazon_df = pd.read_csv('amazon_prime_titles.csv', na_values = ['na','NA'])"
      ],
      "metadata": {
        "id": "y71ZhpvPHybd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "streamset = pd.concat([disney_df,hulu_df,netflix_df,amazon_df], axis=0)"
      ],
      "metadata": {
        "id": "K0m2EaLUs7wW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "streamset = streamset.drop('country', axis=1)\n",
        "streamset = streamset.drop('cast', axis=1)\n",
        "streamset = streamset.drop('description', axis=1)\n",
        "streamset['serviceID'] = streamset.show_id + streamset.service\n",
        "streamset.to_csv(\"streaming_dataset.csv\")"
      ],
      "metadata": {
        "id": "4990CElkjQL_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "streamset"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 676
        },
        "id": "F5tuchTNj4n1",
        "outputId": "4723d594-a3b0-4e60-fe9f-064adca0d3de"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     show_id     type                                             title  \\\n",
              "0         s1    Movie  Duck the Halls: A Mickey Mouse Christmas Special   \n",
              "1         s2    Movie                            Ernest Saves Christmas   \n",
              "2         s3    Movie                      Ice Age: A Mammoth Christmas   \n",
              "3         s4    Movie                        The Queen Family Singalong   \n",
              "4         s5  TV Show                             The Beatles: Get Back   \n",
              "...      ...      ...                                               ...   \n",
              "9663   s9664    Movie                               Pride Of The Bowery   \n",
              "9664   s9665  TV Show                                     Planet Patrol   \n",
              "9665   s9666    Movie                                           Outpost   \n",
              "9666   s9667  TV Show                           Maradona: Blessed Dream   \n",
              "9667   s9668    Movie                                       Harry Brown   \n",
              "\n",
              "                               director date_added  release_year rating  \\\n",
              "0     Alonso Ramirez Ramos, Dave Wasson  26-Nov-21          2016   TV-G   \n",
              "1                           John Cherry  26-Nov-21          1988     PG   \n",
              "2                          Karen Disher  26-Nov-21          2011   TV-G   \n",
              "3                       Hamish Hamilton  26-Nov-21          2021  TV-PG   \n",
              "4                                   NaN  25-Nov-21          2021    NaN   \n",
              "...                                 ...        ...           ...    ...   \n",
              "9663                    Joseph H. Lewis        NaN          1940     7+   \n",
              "9664                                NaN        NaN          2018    13+   \n",
              "9665                       Steve Barker        NaN          2008      R   \n",
              "9666                                NaN        NaN          2021  TV-MA   \n",
              "9667                      Daniel Barber        NaN          2010      R   \n",
              "\n",
              "       duration                      listed_in service    serviceID  \n",
              "0        23 min              Animation, Family  Disney     s1Disney  \n",
              "1        91 min                         Comedy  Disney     s2Disney  \n",
              "2        23 min      Animation, Comedy, Family  Disney     s3Disney  \n",
              "3        41 min                        Musical  Disney     s4Disney  \n",
              "4      1 Season  Docuseries, Historical, Music  Disney     s5Disney  \n",
              "...         ...                            ...     ...          ...  \n",
              "9663     60 min                         Comedy  Amazon  s9664Amazon  \n",
              "9664  4 Seasons                       TV Shows  Amazon  s9665Amazon  \n",
              "9665     90 min                         Action  Amazon  s9666Amazon  \n",
              "9666   1 Season                  Drama, Sports  Amazon  s9667Amazon  \n",
              "9667    103 min        Action, Drama, Suspense  Amazon  s9668Amazon  \n",
              "\n",
              "[22998 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-91bef4a5-a809-43c6-9302-3bfde97d868d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>show_id</th>\n",
              "      <th>type</th>\n",
              "      <th>title</th>\n",
              "      <th>director</th>\n",
              "      <th>date_added</th>\n",
              "      <th>release_year</th>\n",
              "      <th>rating</th>\n",
              "      <th>duration</th>\n",
              "      <th>listed_in</th>\n",
              "      <th>service</th>\n",
              "      <th>serviceID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>s1</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Duck the Halls: A Mickey Mouse Christmas Special</td>\n",
              "      <td>Alonso Ramirez Ramos, Dave Wasson</td>\n",
              "      <td>26-Nov-21</td>\n",
              "      <td>2016</td>\n",
              "      <td>TV-G</td>\n",
              "      <td>23 min</td>\n",
              "      <td>Animation, Family</td>\n",
              "      <td>Disney</td>\n",
              "      <td>s1Disney</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>s2</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Ernest Saves Christmas</td>\n",
              "      <td>John Cherry</td>\n",
              "      <td>26-Nov-21</td>\n",
              "      <td>1988</td>\n",
              "      <td>PG</td>\n",
              "      <td>91 min</td>\n",
              "      <td>Comedy</td>\n",
              "      <td>Disney</td>\n",
              "      <td>s2Disney</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>s3</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Ice Age: A Mammoth Christmas</td>\n",
              "      <td>Karen Disher</td>\n",
              "      <td>26-Nov-21</td>\n",
              "      <td>2011</td>\n",
              "      <td>TV-G</td>\n",
              "      <td>23 min</td>\n",
              "      <td>Animation, Comedy, Family</td>\n",
              "      <td>Disney</td>\n",
              "      <td>s3Disney</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>s4</td>\n",
              "      <td>Movie</td>\n",
              "      <td>The Queen Family Singalong</td>\n",
              "      <td>Hamish Hamilton</td>\n",
              "      <td>26-Nov-21</td>\n",
              "      <td>2021</td>\n",
              "      <td>TV-PG</td>\n",
              "      <td>41 min</td>\n",
              "      <td>Musical</td>\n",
              "      <td>Disney</td>\n",
              "      <td>s4Disney</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>s5</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>The Beatles: Get Back</td>\n",
              "      <td>NaN</td>\n",
              "      <td>25-Nov-21</td>\n",
              "      <td>2021</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1 Season</td>\n",
              "      <td>Docuseries, Historical, Music</td>\n",
              "      <td>Disney</td>\n",
              "      <td>s5Disney</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9663</th>\n",
              "      <td>s9664</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Pride Of The Bowery</td>\n",
              "      <td>Joseph H. Lewis</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1940</td>\n",
              "      <td>7+</td>\n",
              "      <td>60 min</td>\n",
              "      <td>Comedy</td>\n",
              "      <td>Amazon</td>\n",
              "      <td>s9664Amazon</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9664</th>\n",
              "      <td>s9665</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Planet Patrol</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018</td>\n",
              "      <td>13+</td>\n",
              "      <td>4 Seasons</td>\n",
              "      <td>TV Shows</td>\n",
              "      <td>Amazon</td>\n",
              "      <td>s9665Amazon</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9665</th>\n",
              "      <td>s9666</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Outpost</td>\n",
              "      <td>Steve Barker</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2008</td>\n",
              "      <td>R</td>\n",
              "      <td>90 min</td>\n",
              "      <td>Action</td>\n",
              "      <td>Amazon</td>\n",
              "      <td>s9666Amazon</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9666</th>\n",
              "      <td>s9667</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Maradona: Blessed Dream</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021</td>\n",
              "      <td>TV-MA</td>\n",
              "      <td>1 Season</td>\n",
              "      <td>Drama, Sports</td>\n",
              "      <td>Amazon</td>\n",
              "      <td>s9667Amazon</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9667</th>\n",
              "      <td>s9668</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Harry Brown</td>\n",
              "      <td>Daniel Barber</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2010</td>\n",
              "      <td>R</td>\n",
              "      <td>103 min</td>\n",
              "      <td>Action, Drama, Suspense</td>\n",
              "      <td>Amazon</td>\n",
              "      <td>s9668Amazon</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>22998 rows × 11 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-91bef4a5-a809-43c6-9302-3bfde97d868d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-91bef4a5-a809-43c6-9302-3bfde97d868d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-91bef4a5-a809-43c6-9302-3bfde97d868d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "As week looked at the dataset, there was a further need for something for further analysis. One metric that was publically accessible was IMDB's datasets. We choose to continue with them as a data source because they had a numeric variable able for analysis (IMBd Average Rating) as well as the number of people who voted on each particular movie. This gave us a clear variable that was ready for analysis as we continued through our data exploration. \n",
        "\n",
        "The way the IMDB database is laid out, there is eight different datasets you can download from their website. Some data had the names of the movies, others had only scores, others had genres, and actors. All of the datasets were connected by a index variable unique to each individual project. While this made linking the dataset very simplistic, there were numerous excess titles that were included. In the merge. As the largest file from IMDB contained over 34 Million rows of data. This datafile was comprised of things such as videogames, individual TV episodes, and music videos. \n",
        "\n",
        "As there was much that needed to be cleaned, the first step was to merge the datasets together into a single dataset. This dataset would go on to includ title, number of votes, and other aspects that would assit in the data cleaning process."
      ],
      "metadata": {
        "id": "8qOUy6_atSTK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ratings = pd.read_csv(\"https://datasets.imdbws.com/title.ratings.tsv.gz\",na_values = [r'NaN',r'\\N'],sep = '\\t')"
      ],
      "metadata": {
        "id": "hOlx-9Pv0irR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "info = pd.read_csv(\"https://datasets.imdbws.com/title.basics.tsv.gz\", usecols=['tconst','titleType','primaryTitle','startYear','endYear','runtimeMinutes','genres']\n",
        "                   , na_values = ['NaN',r'\\N'],sep = '\\t')"
      ],
      "metadata": {
        "id": "vqeLwNLiBhZA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "akas = pd.read_csv(\"https://datasets.imdbws.com/title.akas.tsv.gz\", usecols=['titleId','title','region','language', 'types'],\n",
        "                  na_values = ['NaN',r'\\N'],sep = '\\t')"
      ],
      "metadata": {
        "id": "Q1-PC_36cPg0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "inforate = pd.merge(info, ratings, on='tconst',  how=\"right\")\n",
        "movieinfo = pd.merge(inforate, akas, left_on='tconst', right_on=\"titleId\", how=\"left\")\n",
        "movieinfo = movieinfo.drop(['titleId','title','tconst'], axis=1)"
      ],
      "metadata": {
        "id": "D_y91apQydr2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "movieinfo"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "IIEVRudq09_B",
        "outputId": "060d74b3-c7ef-4e05-8688-305ca2ffc4f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         titleType    primaryTitle  startYear  endYear runtimeMinutes  \\\n",
              "0            short      Carmencita     1894.0      NaN            1.0   \n",
              "1            short      Carmencita     1894.0      NaN            1.0   \n",
              "2            short      Carmencita     1894.0      NaN            1.0   \n",
              "3            short      Carmencita     1894.0      NaN            1.0   \n",
              "4            short      Carmencita     1894.0      NaN            1.0   \n",
              "...            ...             ...        ...      ...            ...   \n",
              "4433306  tvEpisode  Episode #10.15     2019.0      NaN             43   \n",
              "4433307  tvEpisode  Episode #10.15     2019.0      NaN             43   \n",
              "4433308  tvEpisode  Episode #10.15     2019.0      NaN             43   \n",
              "4433309  tvEpisode  Episode #10.15     2019.0      NaN             43   \n",
              "4433310  tvEpisode          Escape     2019.0      NaN            NaN   \n",
              "\n",
              "                              genres  averageRating  numVotes region language  \\\n",
              "0                  Documentary,Short            5.7      1924     UA      NaN   \n",
              "1                  Documentary,Short            5.7      1924     DE      NaN   \n",
              "2                  Documentary,Short            5.7      1924     HU      NaN   \n",
              "3                  Documentary,Short            5.7      1924     GR      NaN   \n",
              "4                  Documentary,Short            5.7      1924     RU      NaN   \n",
              "...                              ...            ...       ...    ...      ...   \n",
              "4433306  Family,Game-Show,Reality-TV            6.7        21     DE       de   \n",
              "4433307  Family,Game-Show,Reality-TV            6.7        21     PT       pt   \n",
              "4433308  Family,Game-Show,Reality-TV            6.7        21     IN       hi   \n",
              "4433309  Family,Game-Show,Reality-TV            6.7        21     FR       fr   \n",
              "4433310          Crime,Drama,Mystery            7.3        35    NaN      NaN   \n",
              "\n",
              "               types  \n",
              "0        imdbDisplay  \n",
              "1                NaN  \n",
              "2        imdbDisplay  \n",
              "3        imdbDisplay  \n",
              "4        imdbDisplay  \n",
              "...              ...  \n",
              "4433306          NaN  \n",
              "4433307          NaN  \n",
              "4433308          NaN  \n",
              "4433309          NaN  \n",
              "4433310          NaN  \n",
              "\n",
              "[4433311 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2e2d1d33-2650-4a91-b914-f66747d574a2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>titleType</th>\n",
              "      <th>primaryTitle</th>\n",
              "      <th>startYear</th>\n",
              "      <th>endYear</th>\n",
              "      <th>runtimeMinutes</th>\n",
              "      <th>genres</th>\n",
              "      <th>averageRating</th>\n",
              "      <th>numVotes</th>\n",
              "      <th>region</th>\n",
              "      <th>language</th>\n",
              "      <th>types</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>short</td>\n",
              "      <td>Carmencita</td>\n",
              "      <td>1894.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Documentary,Short</td>\n",
              "      <td>5.7</td>\n",
              "      <td>1924</td>\n",
              "      <td>UA</td>\n",
              "      <td>NaN</td>\n",
              "      <td>imdbDisplay</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>short</td>\n",
              "      <td>Carmencita</td>\n",
              "      <td>1894.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Documentary,Short</td>\n",
              "      <td>5.7</td>\n",
              "      <td>1924</td>\n",
              "      <td>DE</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>short</td>\n",
              "      <td>Carmencita</td>\n",
              "      <td>1894.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Documentary,Short</td>\n",
              "      <td>5.7</td>\n",
              "      <td>1924</td>\n",
              "      <td>HU</td>\n",
              "      <td>NaN</td>\n",
              "      <td>imdbDisplay</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>short</td>\n",
              "      <td>Carmencita</td>\n",
              "      <td>1894.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Documentary,Short</td>\n",
              "      <td>5.7</td>\n",
              "      <td>1924</td>\n",
              "      <td>GR</td>\n",
              "      <td>NaN</td>\n",
              "      <td>imdbDisplay</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>short</td>\n",
              "      <td>Carmencita</td>\n",
              "      <td>1894.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Documentary,Short</td>\n",
              "      <td>5.7</td>\n",
              "      <td>1924</td>\n",
              "      <td>RU</td>\n",
              "      <td>NaN</td>\n",
              "      <td>imdbDisplay</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4433306</th>\n",
              "      <td>tvEpisode</td>\n",
              "      <td>Episode #10.15</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>43</td>\n",
              "      <td>Family,Game-Show,Reality-TV</td>\n",
              "      <td>6.7</td>\n",
              "      <td>21</td>\n",
              "      <td>DE</td>\n",
              "      <td>de</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4433307</th>\n",
              "      <td>tvEpisode</td>\n",
              "      <td>Episode #10.15</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>43</td>\n",
              "      <td>Family,Game-Show,Reality-TV</td>\n",
              "      <td>6.7</td>\n",
              "      <td>21</td>\n",
              "      <td>PT</td>\n",
              "      <td>pt</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4433308</th>\n",
              "      <td>tvEpisode</td>\n",
              "      <td>Episode #10.15</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>43</td>\n",
              "      <td>Family,Game-Show,Reality-TV</td>\n",
              "      <td>6.7</td>\n",
              "      <td>21</td>\n",
              "      <td>IN</td>\n",
              "      <td>hi</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4433309</th>\n",
              "      <td>tvEpisode</td>\n",
              "      <td>Episode #10.15</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>43</td>\n",
              "      <td>Family,Game-Show,Reality-TV</td>\n",
              "      <td>6.7</td>\n",
              "      <td>21</td>\n",
              "      <td>FR</td>\n",
              "      <td>fr</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4433310</th>\n",
              "      <td>tvEpisode</td>\n",
              "      <td>Escape</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Crime,Drama,Mystery</td>\n",
              "      <td>7.3</td>\n",
              "      <td>35</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4433311 rows × 11 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2e2d1d33-2650-4a91-b914-f66747d574a2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2e2d1d33-2650-4a91-b914-f66747d574a2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2e2d1d33-2650-4a91-b914-f66747d574a2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "For the next step in the process, we further cleaned the IMDB dataset before the final merge onto the Kaggle dataset. To narrow down the results, we further removed things that were outside the scope of our analysis, such as Videogames and individual TV Episodes. Then we removed any titles that did not have any IMDB rating or number of votes, as we only wanted to include titles that could be compared with a score. We also dropped any titles without a year of release. Year is one of things we merged during our final dataset, so we wanted to ensure any titles had at least a year attached to it. The last step in this process was to add an additional column with our own calculation. It was comprised of the average IMDB score multipled by the number of Votes. This was going to be used later in our analysis to see if there was some merrit to the scores that might have been lower than other but had a larger number of votes."
      ],
      "metadata": {
        "id": "cYCz4jDV0rbp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "movieinfo = movieinfo.dropna(subset=['averageRating','numVotes'])\n",
        "movieinfo = movieinfo.dropna(subset=['startYear'])\n",
        "movieinfo = movieinfo[movieinfo.titleType != \"tvEpisode\"]\n",
        "movieinfo = movieinfo[movieinfo.titleType != \"videoGame\"]\n",
        "movieinfo[\"IMDbScore\"] = movieinfo.averageRating * movieinfo.numVotes\n",
        "movieinfo.sort_values(by='startYear', ascending=True,inplace=True)\n",
        "movieinfo = movieinfo.reset_index()"
      ],
      "metadata": {
        "id": "CeakNGhM00Wf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "movieinfo.to_csv(\"IMDB_US.csv\")"
      ],
      "metadata": {
        "id": "e7HTusg4E9Ym"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "For the final step, as there are now two cleaned data sheets, we wanted to combine them into one final master data file. One sheet was the Kaggle dataset with the four individual Streaming services combined into one and other with information collected from IMDB. \n",
        "\n",
        "The first step was to first make the titles of both datasets lowercase and striped of any white spaces. This was done to help ensure records would not be lost in a merge due to differences in capitalization or any extra unseen spaces. With those clean, we then preformed a merge on both the item title and year. This was to ensure that movies under the same name were more likely to get the correct score associated with it. For instance, as Disney has 2 different versions of Pinocchio, one from 1940 and 2022, it would help merge the correct IMDB profile with the correct title listed on the Kaggle dataset. The merge performed was a right merge onto the Streaming dataset. This is because there were still hundreds of thousands of records on the IMDB dataset compared to the couple ten thousands on the Kaggle set. We also wanted to make sure we were only looking at movies that were on a streaming platform, thus the reason for the merge onto the streaming data."
      ],
      "metadata": {
        "id": "CtnnU4LX3ygy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "IMDB = pd.read_csv('IMDB_US.csv', na_values = ['na','NA'])\n",
        "Stream = pd.read_csv('streaming_dataset.csv', na_values = ['na','NA'])"
      ],
      "metadata": {
        "id": "FeZnUnSy0JLw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "IMDB['primaryTitle'] = IMDB['primaryTitle'].str.lower()\n",
        "Stream['title'] = Stream['title'].str.lower()\n",
        "IMDB['primaryTitle'] = IMDB['primaryTitle'].str.strip()\n",
        "Stream['title'] = Stream['title'].str.strip()"
      ],
      "metadata": {
        "id": "h_PsVm8oOWdB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " moviedatset = pd.merge(IMDB, Stream, left_on=[\"primaryTitle\",\"startYear\"], right_on=[\"title\",\"release_year\"], how=\"right\")"
      ],
      "metadata": {
        "id": "PMLYLZzR4WbI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "moviedataset = moviedataset.drop('primaryTitle', axis=1)\n",
        "moviedataset = moviedataset.drop('show_id', axis=1)\n",
        "moviedataset = moviedataset.drop('release_year', axis=1)\n",
        "moviedataset = moviedataset.drop('listed_in', axis=1)\n",
        "moviedataset.to_csv(\"combined_dataset.csv\")"
      ],
      "metadata": {
        "id": "x4Hdl5pPBy3P"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The last step in the data cleaning process was to take the now merged dataset and perform one last step to seperate our genres. The genres in the current state, sat together in a single string. Movies and shows had anywhere from one to five genres listed on them. To seperate it out we turned each genre into there own column with their own variable."
      ],
      "metadata": {
        "id": "9XD_WNEW-IlM"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HSFXlhIlWL_Z"
      },
      "outputs": [],
      "source": [
        "df = pd.read_csv('combined_dataset.csv')\n",
        "genres = df['genres'].str.get_dummies(sep=',')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "MVgenre = pd.merge(df, genres, left_index=True, right_index=True)"
      ],
      "metadata": {
        "id": "5_hYOIqoY15D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "MVgenre.to_csv(\"master_dataset.csv\")"
      ],
      "metadata": {
        "id": "iJe_JvH9aRor"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Following this we then changed the data type of the genre columns to a boolean variable. With all these changes, our final dataset was ready to visualized and analyzed. "
      ],
      "metadata": {
        "id": "aPk1VaY-EJQh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('master_dataset.csv', na_values = [r'NaN'])"
      ],
      "metadata": {
        "id": "1Z0x9p7Woxo7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#change our dummmy genre variables into booleans\n",
        "df.Action = df.Action.astype(bool)\n",
        "df.Adult = df.Adult.astype(bool)\n",
        "df.Adventure = df.Adventure.astype(bool)\n",
        "df.Animation = df.Animation.astype(bool)\n",
        "df.Biography = df.Biography.astype(bool)\n",
        "df.Crime = df.Crime.astype(bool)\n",
        "df.Comedy = df.Comedy.astype(bool)\n",
        "df.Documentary = df.Documentary.astype(bool)\n",
        "df.Drama = df.Drama.astype(bool)\n",
        "df.Family = df.Family.astype(bool)\n",
        "df.Fantasy = df.Fantasy.astype(bool)\n",
        "df['Film-Noir'] = df['Film-Noir'].astype(bool)\n",
        "df.History = df.History.astype(bool)\n",
        "df['Game-Show'] = df['Game-Show'].astype(bool)\n",
        "df.Horror = df.Horror.astype(bool)\n",
        "df.Music = df.Music.astype(bool)\n",
        "df.Musical = df.Musical.astype(bool)\n",
        "df.Mystery = df.Mystery.astype(bool)\n",
        "df.News = df.News.astype(bool)\n",
        "df['Reality-TV'] = df['Reality-TV'].astype(bool)\n",
        "df.Romance = df.Romance.astype(bool)\n",
        "df['Sci-Fi'] = df['Sci-Fi'].astype(bool)\n",
        "df.Short = df.Short.astype(bool)\n",
        "df.Sport = df.Sport.astype(bool)\n",
        "df.Thriller = df.Thriller.astype(bool)\n",
        "df['Talk-Show'] = df['Talk-Show'].astype(bool)\n",
        "df.War = df.War.astype(bool)\n",
        "df.Western = df.Western.astype(bool)"
      ],
      "metadata": {
        "id": "eVpiXQ9ipAhy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "id": "fsnfRaTecedv",
        "outputId": "77a02203-2c16-45e7-b48e-fa76cbc9ba75"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          title     type     titleType  \\\n",
              "0        ernest saves christmas    Movie         movie   \n",
              "1  ice age: a mammoth christmas    Movie       tvShort   \n",
              "2    the queen family singalong    Movie     tvSpecial   \n",
              "3         the beatles: get back  TV Show  tvMiniSeries   \n",
              "4             becoming cousteau    Movie         movie   \n",
              "\n",
              "                            genres  startYear  endYear  averageRating  \\\n",
              "0            Comedy,Family,Fantasy       1988      NaN            5.6   \n",
              "1       Adventure,Animation,Comedy       2011      NaN            6.4   \n",
              "2                    Music,Musical       2021      NaN            5.7   \n",
              "3      Biography,Documentary,Music       2021   2021.0            9.0   \n",
              "4  Adventure,Biography,Documentary       2021      NaN            7.1   \n",
              "\n",
              "   numVotes  IMDBScore  runtimeMinutes  ...   News Reality-TV Romance Sci-Fi  \\\n",
              "0     11621    65077.6            95.0  ...  False      False   False  False   \n",
              "1     10523    67347.2            26.0  ...  False      False   False  False   \n",
              "2       103      587.1            41.0  ...  False      False   False  False   \n",
              "3     22720   204480.0           468.0  ...  False      False   False  False   \n",
              "4      1167     8285.7            94.0  ...  False      False   False  False   \n",
              "\n",
              "   Short  Sport Talk-Show Thriller    War  Western  \n",
              "0  False  False     False    False  False    False  \n",
              "1  False  False     False    False  False    False  \n",
              "2  False  False     False    False  False    False  \n",
              "3  False  False     False    False  False    False  \n",
              "4  False  False     False    False  False    False  \n",
              "\n",
              "[5 rows x 47 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e5301077-59a7-43d0-8a8e-cdf3674a519f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title</th>\n",
              "      <th>type</th>\n",
              "      <th>titleType</th>\n",
              "      <th>genres</th>\n",
              "      <th>startYear</th>\n",
              "      <th>endYear</th>\n",
              "      <th>averageRating</th>\n",
              "      <th>numVotes</th>\n",
              "      <th>IMDBScore</th>\n",
              "      <th>runtimeMinutes</th>\n",
              "      <th>...</th>\n",
              "      <th>News</th>\n",
              "      <th>Reality-TV</th>\n",
              "      <th>Romance</th>\n",
              "      <th>Sci-Fi</th>\n",
              "      <th>Short</th>\n",
              "      <th>Sport</th>\n",
              "      <th>Talk-Show</th>\n",
              "      <th>Thriller</th>\n",
              "      <th>War</th>\n",
              "      <th>Western</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ernest saves christmas</td>\n",
              "      <td>Movie</td>\n",
              "      <td>movie</td>\n",
              "      <td>Comedy,Family,Fantasy</td>\n",
              "      <td>1988</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.6</td>\n",
              "      <td>11621</td>\n",
              "      <td>65077.6</td>\n",
              "      <td>95.0</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ice age: a mammoth christmas</td>\n",
              "      <td>Movie</td>\n",
              "      <td>tvShort</td>\n",
              "      <td>Adventure,Animation,Comedy</td>\n",
              "      <td>2011</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6.4</td>\n",
              "      <td>10523</td>\n",
              "      <td>67347.2</td>\n",
              "      <td>26.0</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>the queen family singalong</td>\n",
              "      <td>Movie</td>\n",
              "      <td>tvSpecial</td>\n",
              "      <td>Music,Musical</td>\n",
              "      <td>2021</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.7</td>\n",
              "      <td>103</td>\n",
              "      <td>587.1</td>\n",
              "      <td>41.0</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>the beatles: get back</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>tvMiniSeries</td>\n",
              "      <td>Biography,Documentary,Music</td>\n",
              "      <td>2021</td>\n",
              "      <td>2021.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>22720</td>\n",
              "      <td>204480.0</td>\n",
              "      <td>468.0</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>becoming cousteau</td>\n",
              "      <td>Movie</td>\n",
              "      <td>movie</td>\n",
              "      <td>Adventure,Biography,Documentary</td>\n",
              "      <td>2021</td>\n",
              "      <td>NaN</td>\n",
              "      <td>7.1</td>\n",
              "      <td>1167</td>\n",
              "      <td>8285.7</td>\n",
              "      <td>94.0</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 47 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e5301077-59a7-43d0-8a8e-cdf3674a519f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e5301077-59a7-43d0-8a8e-cdf3674a519f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e5301077-59a7-43d0-8a8e-cdf3674a519f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###***Methodology after merge in main dataset***"
      ],
      "metadata": {
        "id": "vHZ5fQ8GoosR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "zuCfozMlFLXI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_fDVTvzlp-vA",
        "outputId": "578b24f1-baaf-41de-9560-930b30c537d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 14336 entries, 0 to 14335\n",
            "Data columns (total 47 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   title           14336 non-null  object \n",
            " 1   type            14336 non-null  object \n",
            " 2   titleType       14336 non-null  object \n",
            " 3   genres          14292 non-null  object \n",
            " 4   startYear       14336 non-null  int64  \n",
            " 5   endYear         1904 non-null   float64\n",
            " 6   averageRating   14336 non-null  float64\n",
            " 7   numVotes        14336 non-null  int64  \n",
            " 8   IMDBScore       14336 non-null  float64\n",
            " 9   runtimeMinutes  13301 non-null  float64\n",
            " 10  duration        14016 non-null  object \n",
            " 11  director        9819 non-null   object \n",
            " 12  date_added      9688 non-null   object \n",
            " 13  month_added     9688 non-null   object \n",
            " 14  day_added       9685 non-null   float64\n",
            " 15  year_added      9685 non-null   float64\n",
            " 16  rating          13907 non-null  object \n",
            " 17  service         14336 non-null  object \n",
            " 18  serviceID       14336 non-null  object \n",
            " 19  Action          14336 non-null  bool   \n",
            " 20  Adult           14336 non-null  bool   \n",
            " 21  Adventure       14336 non-null  bool   \n",
            " 22  Animation       14336 non-null  bool   \n",
            " 23  Biography       14336 non-null  bool   \n",
            " 24  Comedy          14336 non-null  bool   \n",
            " 25  Crime           14336 non-null  bool   \n",
            " 26  Documentary     14336 non-null  bool   \n",
            " 27  Drama           14336 non-null  bool   \n",
            " 28  Family          14336 non-null  bool   \n",
            " 29  Fantasy         14336 non-null  bool   \n",
            " 30  Film-Noir       14336 non-null  bool   \n",
            " 31  Game-Show       14336 non-null  bool   \n",
            " 32  History         14336 non-null  bool   \n",
            " 33  Horror          14336 non-null  bool   \n",
            " 34  Music           14336 non-null  bool   \n",
            " 35  Musical         14336 non-null  bool   \n",
            " 36  Mystery         14336 non-null  bool   \n",
            " 37  News            14336 non-null  bool   \n",
            " 38  Reality-TV      14336 non-null  bool   \n",
            " 39  Romance         14336 non-null  bool   \n",
            " 40  Sci-Fi          14336 non-null  bool   \n",
            " 41  Short           14336 non-null  bool   \n",
            " 42  Sport           14336 non-null  bool   \n",
            " 43  Talk-Show       14336 non-null  bool   \n",
            " 44  Thriller        14336 non-null  bool   \n",
            " 45  War             14336 non-null  bool   \n",
            " 46  Western         14336 non-null  bool   \n",
            "dtypes: bool(28), float64(6), int64(2), object(11)\n",
            "memory usage: 2.5+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "To prep for our analysis we created slices for each service to be able to compare Netlfix with its closest competitors."
      ],
      "metadata": {
        "id": "P14YDFmIqam0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#streaming service slice\n",
        "df_disney = df[df.service == 'Disney']\n",
        "df_amazon = df[df.service == 'Amazon']\n",
        "df_hulu = df[df.service == 'Hulu']\n",
        "df_netflix = df[df.service == 'Netflix']"
      ],
      "metadata": {
        "id": "0OZPpRh2qVE7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Before even beginning our analysis, we had to determine important measures we wanted to analyze. We determined that we would use average rating, number of votes, runtime, and IMDB score to analyze based off our slices by service and content type"
      ],
      "metadata": {
        "id": "hi6qa-__uT_1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##***Findings and Interpretation***"
      ],
      "metadata": {
        "id": "FyVLLj_XrCdt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "First we wanted to look at the volume of content created by the industry as a whole to see how the industry was performing. We used data added as the index column for this chart along with a few other ones. "
      ],
      "metadata": {
        "id": "e-YDdNCbx4a9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Set date added as index\n",
        "movie_ind = pd.read_csv(\"master_dataset.csv\", parse_dates=['date_added'],\n",
        "                        index_col=['date_added'], na_values=(['na','NA']))\n",
        "\n",
        "movie_ind.head()\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "# Histogram to see the distribution of movies since the 1920's. \n",
        "\n",
        "plt.hist(movie_ind.startYear, bins=10, color='green')\n",
        "plt.xlabel('Start Year')\n",
        "plt.ylabel('Count of Content')\n",
        "plt.title('Content released between 1928 and 2021')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "WpmKWmkYrnwa",
        "outputId": "aee972eb-d97e-473e-8f5c-c24444705a5b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Most content in the data set was released in the 21st century. This is not surprising since Netflix  was the first streaming service and started in 1997. Based on this graph, streaming service content has tripled over the past 10 years. This graph shows how the industry has skrocketed. However, with the increase in content, the competition has heightened as Netflix is no longer the only major player. "
      ],
      "metadata": {
        "id": "n4pXwylFzPqO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Next, we will examine the average rating of content types for all streaming services."
      ],
      "metadata": {
        "id": "XUb7ZEKF0hPW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#bar plot average rating by title type\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "plt.bar(df.titleType, df.averageRating)\n",
        "plt.title('Average Rating by Type') \n",
        "plt.xlabel('Type') \n",
        "plt.ylabel('Rating') \n",
        "plt.xticks(rotation=45)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 336
        },
        "id": "uUbvpGOW0wLj",
        "outputId": "983d0f3a-bc32-4cf0-ece0-8ec3c63d2e44"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This graph shows the most popular content types based on their average rating scores. The three largest ratings are shorts, TV series, and TV mini series. We recommend that Netflix focuses on creating these types of content in order to raise their overall average rating. We know that consumers enjoy these content types based on their rating and advise more investments into creating these types. "
      ],
      "metadata": {
        "id": "H5A8lmZr1Mcq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Next we will analyze the genres using the boolean columns we created. "
      ],
      "metadata": {
        "id": "ec1ECzn72Jzu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df[df.columns[19:]].sum().plot.bar(rot=90, color='DarkTurquoise')\n",
        "plt.xlabel('Genres')\n",
        "plt.ylabel('Count of Movies')\n",
        "plt.title('Number of Movies per Genre')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 353
        },
        "id": "XoGNBwwE2rJl",
        "outputId": "d7a49978-8752-4b9a-fe7c-03e8214ca263"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Using our dummy variables, there was 28 different genres that movies and TV shows could have been categorized in. By far the most popular categories were drama and comedy. Comedy was something that went hand in hand with other genres. Comedy was frequently seen with action, drama and fantasy. Many categories only had a couple hundred occurances. Categories such as Adult, War, Western, Game-Show were all largerly dwarfed by the number of instances of the top 10 genres.\n",
        "\n",
        "Below is an additional graph of the top ten genres in our dataset."
      ],
      "metadata": {
        "id": "TQzkFwlF2s1q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax = plt.subplots(figsize =(8, 7))\n",
        "\n",
        "df[df.columns[19:]].sum().nlargest(10).plot.pie(\n",
        "    startangle=90,\n",
        "    shadow=True,\n",
        "    explode = (.1, 0, 0, 0, 0, 0, 0, 0, 0, 0),\n",
        "    autopct= '%1.1f%%'\n",
        ")\n",
        "plt.ylabel(\"\")\n",
        "plt.title('Top 10 Most Popular Genres')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 427
        },
        "id": "_H2lm6243FhF",
        "outputId": "86ab614e-0313-4ff4-e2f5-3ded24c3e50b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x504 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "As we can see similiar to the previous graphic, Drama and Comedy share a large majority of the genres movies are listed under. We can further see the explanations as to why this is into a deeper dive into the individual streaming platforms. Below are the top five genres listed for each individual streaming service."
      ],
      "metadata": {
        "id": "2aTmR31q3IHP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_disney[df_disney.columns[19:]].sum().nlargest().plot.bar(rot=0, color='Green')\n",
        "plt.title('Top Genres: Disney')\n",
        "plt.ylabel('Count of Movies')\n",
        "plt.xlabel('Genre')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "fLm6QCZR3job",
        "outputId": "016aba6a-bb3b-4ed0-8179-b5996cda3317"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_hulu[df_hulu.columns[19:]].sum().nlargest().plot.bar(rot=0, color='Orange')\n",
        "plt.title('Top Genres: Hulu') \n",
        "plt.ylabel('Count of Movies')\n",
        "plt.xlabel('Genre')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "ORgimOO03reg",
        "outputId": "07d6ed92-06c8-40f0-aa7b-5e2493c15e74"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_amazon[df_amazon.columns[19:]].sum().nlargest().plot.bar(rot=0, color='Red')\n",
        "plt.title('Top Genres: Amazon Video')\n",
        "plt.ylabel('Count of Movies')\n",
        "plt.xlabel('Genre')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "DUVoJBXn3vXO",
        "outputId": "fc181231-0d13-48d4-f0d1-252682c324a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_netflix[df_netflix.columns[19:]].sum().nlargest().plot.bar(rot=0, color='Blue')\n",
        "plt.title('Top Genres: Netflix')\n",
        "plt.ylabel('Count of Movies')\n",
        "plt.xlabel('Genre')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "_hik-urS3yYb",
        "outputId": "c8cec8e5-b798-49bc-8d3b-ded06b52e438"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "It is interesting to note, that Hulu, Amazon, and Netlix all have the same top 3 categories. This being drama, comedy, and action, in this order. The outlier in this scenario is Disney+. Their service has the family and adventure genres listed in their top 3, whereas none of the other 5 even have them in their top 5. \n",
        "\n",
        "We can see Disney's approach to the streaming world is to focus on their own niche. Which would be family  animation and adventure films for the whole family. Each of the other 3 services all have unique 4th and 5th top genres. For instance, Netflix has a niche of Documentary and Crime titles. Opposed to Hulu having more animation, and Amazon having more romances. \n",
        "\n",
        "Each service clearly has the overall blockbluster titles on their service. When it comes to Drama and Comedy, each service will have a movie that is fitted for a general audience. For example, Netflix has titles such as the *Seinfeld* and *Gladiator* that can be viewed positively by most audiences. But the niches entertainment are what help persuaade viewer into choosing one service over another. Example, someone who loves adult cartoons and anime titles such as *Animaniacs* or *My Hero Academia* might choose Hulu, opposed to Disney where these titles are unavailable. It is important for these services to continue to imporive their approach to streaming. Services will need to determine whether they want to stick with their niches, such as Disney with family titles, or to broaden to try to cover all genres such as Netflix."
      ],
      "metadata": {
        "id": "85I97_E531Rk"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Next, we will compare the total and average number of votes by each service. This will further dive into the analysis of choosing a niche or broadening for all content."
      ],
      "metadata": {
        "id": "XQ4UlYP74CJh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Preparation of variables for Boxplots with service and type. \n",
        "imdb_ind = pd.read_csv(\"master_dataset.csv\", parse_dates=['date_added'],\n",
        "                        index_col=['date_added'], na_values=(['na','NA'])) # Imported with date_added set as index\n",
        "\n",
        "imdb_ind = imdb_ind.sort_index() # Sort index in chronological order. May come in handy if Time Series is incorporated. \n",
        "\n",
        "imdb_majors = imdb_ind.reset_index() # reset index due to challenges graphing.\n",
        "\n",
        "imdb_movies = imdb_majors[imdb_majors['type']=='Movie'] # Create variable for type Movies only\n",
        "imdb_tvshows = imdb_majors[imdb_majors['type']=='TV Show'] # Create variable for type TV Shows only\n",
        "\n",
        "imdb_movies.service.unique()\n",
        "\n",
        "netflix_movies = imdb_movies[imdb_movies.service=='Netflix']\n",
        "hulu_movies = imdb_movies[imdb_movies.service=='Hulu']\n",
        "disney_movies = imdb_movies[imdb_movies.service=='Disney']\n",
        "amazon_movies = imdb_movies[imdb_movies.service=='Amazon']\n",
        "# Bar chart with service, type, and numVotes focused on sum\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "ax.bar('Netflix', netflix_movies.numVotes)\n",
        "ax.bar('Hulu', hulu_movies.numVotes)\n",
        "ax.bar('Disney', disney_movies.numVotes)\n",
        "ax.bar('Amazon', amazon_movies.numVotes)\n",
        "ax.set_xlabel('Service Provider')\n",
        "ax.set_ylabel('Number of Votes (Millions)')\n",
        "ax.set_title('Comparison of total votes by Service')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "kRrnes4h4WC9",
        "outputId": "82677ae2-a9ba-4344-98b2-018a6acda0fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The number of votes represents the number of clicks on content produced. In other words, number of votes serves as a proxy to the interest generated by content on a service providers platform. The bar chart above shows that Netflix is the most popular service provider since it garners the largest number of votes because its content has the most clicks. Disney+ is a distant second while Hulu and Amazon are about level. These results are not surprising considering that Netflix is the pioneer in the streaming business having launched its platform in the mainstream in 2007 (10k 2021). The number of votes can be used as a measure to ascertain whether a streaming service is gaining more viewership, which translates to more subscribers.    "
      ],
      "metadata": {
        "id": "6wF_WhFj4o6g"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Bar Charts with service, type, and numVotes.\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "ax.bar('Netflix', netflix_movies.numVotes.mean())\n",
        "ax.bar('Hulu', hulu_movies.numVotes.mean())\n",
        "ax.bar('Disney', disney_movies.numVotes.mean())\n",
        "ax.bar('Amazon', amazon_movies.numVotes.mean())\n",
        "ax.set_ylabel('Average Number of Votes')\n",
        "ax.set_title('Comparison of average votes by Service')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "id": "wfAYiAyY4xgf",
        "outputId": "9d42beaa-da88-434e-9a25-66dbd3fe33fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "After gaining an understanding of the popularity of the different streaming services, we focused on the average votes to remove any plausible bias from Netflix's first mover advantage. Surprisingly, Netflix fell third after Disney+ and Hulu. Disney+ has the advantage of drawing upon its breadth of content spanning decades and strong intellectual property. Thus, Disney has more clicks per content on its service, a testament to the popularity of its in house content such as the successful Marvel movies and tv shows. Furthermore, after careful inspection of the content we discovered that Hulu shares the same content produced by Disney. Disney has significant shareholding in Hulu, which explains similar content appearing on both platforms (Sherman, 2022). Therefore, it is not surprising the average rating per content for Hulu is second to Disney+.  "
      ],
      "metadata": {
        "id": "uxDrMsHK438v"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Next, we will analyze the distribution of average ratings for each service."
      ],
      "metadata": {
        "id": "Ud-9KSm65D_F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Boxplot by service, movies, and numVotes to guage distribution of votes\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "ax.boxplot([netflix_movies.averageRating, hulu_movies.averageRating,\n",
        "           disney_movies.averageRating, amazon_movies.averageRating])\n",
        "ax.set_xticklabels(['Netflix','Hulu','Disney','Amazon'])\n",
        "ax.set_xlabel('Service Provider')\n",
        "ax.set_ylabel('Average Rating')\n",
        "ax.set_title('Distribution of Average Rating by Service')\n",
        "\n",
        "plt.show()\n",
        "\n",
        "# Netflix has a number of outliers below the bottom whisker. This is not surprising given Netflix's volume based approach to producing content. \n",
        "# Netflix is more likely to have more underperforming movies than than other service providers because of its business model.\n",
        "# Netflix and Hulu have comparable content in terms of quality based on the interquartile range, though Netflix has a slighlty higher median. \n",
        "# Disney appears to be doing the best job of consistently producing high quality content. Their interquartile range is narrower and \n",
        "# with 75% of content having an averge rating of atleast 6.2. This is above any other service. \n",
        "# Amazon is signficiant at either end of the spectrum. They have the most outliers on both the lower end and upper end. "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "-phPF1er5Kyu",
        "outputId": "5e5491c0-1b40-4add-d078-50c13d692f70"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/matplotlib/cbook/__init__.py:1376: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
            "  X = np.atleast_1d(X.T if isinstance(X, np.ndarray) else np.asarray(X))\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Next, we analyzed the quality of the content by reviewing average rating for content across the service providers. Netflix has a wide distribution and a number of outliers below its minimum rating just above three. Interestingly, this reflects Netflix business model of producing as much content as possible to air on its service. A volume based approach tends to produce alot of poor quality content with the expectation that the benefits from supplying content to a wider demographic and geopgraphy will outweigh the poor quality content. Disney+ has the most narrow band and highest median of the service providers indicative of its high quality content. Additionally, it has less outliers than the other service providers except for Hulu. As expected, Hulu also has a narrow band since it sources content from Disney's rich pool and has the least outliers. Given that it has a lower budget than the other three, Hulu must be more selective on its investments. Amazon Prime has the widest band producing both the highest and lowest rated movies. Because Amazon Prime has access to funding from its parent company, it can afford to invest in big budget shows that capture praise from industry critics, and costly shows that fall short of viewers expectations (New York Times Events, 2022).   "
      ],
      "metadata": {
        "id": "sUFWnKVj5T_U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(df.averageRating, bins=range(1,11), rwidth=.9, align=\"left\", color='purple')\n",
        "plt.xticks(range(10))\n",
        "plt.title('Distribution of Average Ratings')\n",
        "plt.xlabel('Average IMDB Rating')\n",
        "plt.ylabel('Ratings Reported')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "kjLOCRAL5fvG",
        "outputId": "b0c129f4-744e-4241-9c63-ff7967faa847"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "To put our analysis on ratings into context, we created the above Histogram to get a sense of the distribution of ratings before delving into the specific service provider ratings. The majority of ratings in the data set fall between 6 and 7."
      ],
      "metadata": {
        "id": "hk1Ui7bn5k9-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "We also created pivot tables, in order to analyze aggregation measures between the 4 services."
      ],
      "metadata": {
        "id": "ZgRpeGyn5vA8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create Pivot tables for the different data sets.\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "master = pd.read_csv(\"master_dataset.csv\", na_values=(['na','NA']))\n",
        "\n",
        "\n",
        "avgrating_pivot = master.pivot_table(values='averageRating',\n",
        "                   index='type',\n",
        "                   columns='service',\n",
        "                   aggfunc=['mean','median']).round(2) # Mean and Median of Average rating by titletype for each of the service providers\n",
        "\n",
        "runtimeMinutes_pivot = master.pivot_table(values='runtimeMinutes',\n",
        "                   index='type',\n",
        "                   columns='service',\n",
        "                   aggfunc=['mean','median']).round(2) # Mean and median of runtimeMinutes by titletype for each of the service providers\n",
        "\n",
        "IMDBscore_pivot = master.pivot_table(values='IMDBScore',\n",
        "                   index='type',\n",
        "                   columns='service',\n",
        "                   aggfunc=['mean','median']).round(0) # Mean and median of IMDBscore by titletype for each of the service providers\n",
        "\n",
        "avgrating_pivot"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "IPk97nEV56M0",
        "outputId": "74b9a318-5dca-4bb5-f1be-3c7eb91c492a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          mean                      median                    \n",
              "service Amazon Disney  Hulu Netflix Amazon Disney Hulu Netflix\n",
              "type                                                          \n",
              "Movie     5.90   6.44  6.22    6.24    6.0    6.5  6.3     6.4\n",
              "TV Show   7.04   7.08  7.12    6.96    7.2    7.3  7.3     7.1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5c0d55a1-0694-4706-be4e-8863bf00e81c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th colspan=\"4\" halign=\"left\">mean</th>\n",
              "      <th colspan=\"4\" halign=\"left\">median</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>service</th>\n",
              "      <th>Amazon</th>\n",
              "      <th>Disney</th>\n",
              "      <th>Hulu</th>\n",
              "      <th>Netflix</th>\n",
              "      <th>Amazon</th>\n",
              "      <th>Disney</th>\n",
              "      <th>Hulu</th>\n",
              "      <th>Netflix</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>type</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Movie</th>\n",
              "      <td>5.90</td>\n",
              "      <td>6.44</td>\n",
              "      <td>6.22</td>\n",
              "      <td>6.24</td>\n",
              "      <td>6.0</td>\n",
              "      <td>6.5</td>\n",
              "      <td>6.3</td>\n",
              "      <td>6.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TV Show</th>\n",
              "      <td>7.04</td>\n",
              "      <td>7.08</td>\n",
              "      <td>7.12</td>\n",
              "      <td>6.96</td>\n",
              "      <td>7.2</td>\n",
              "      <td>7.3</td>\n",
              "      <td>7.3</td>\n",
              "      <td>7.1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5c0d55a1-0694-4706-be4e-8863bf00e81c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5c0d55a1-0694-4706-be4e-8863bf00e81c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5c0d55a1-0694-4706-be4e-8863bf00e81c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The average ratings for movies of all the service providers is below the median. Thus, it can be construed that most service providers have more content that fall below expectations as opposed to content that is critically acclaimed. TV shows reflect a similar trend. \n",
        "\n",
        "Disney has the highest average and median rating at 6.44 and 6.5 while Netflix narrowly trails with 6.24 and 6.4. Considering the analysis of number of votes and ratings, Disney seems to be the major competitor against Netflix in the long run."
      ],
      "metadata": {
        "id": "N57NBIAK59Sv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Recommendations"
      ],
      "metadata": {
        "id": "OEhcZ1pJrnO0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Consistent with our analysis above, we recommend for Netflix to focus on creating TV series, TV movies, and short films as they are most liked, according to average ratings. Additionally, we also recommend for Netflix to invest more resources to improving their niche genres of documentaries and crime. Because of the high competition in action and comedy genres, they must focus on their niche genres in order to differentiate themselves from their competitors. Additionally, we also recommend for Netflix to focus more on the quality of their content, as opposed to their previous focus on the quantity. This will move Netflix away from dropping all their content at once, in hopes of improving the quality and in turn increasing ratings and subscriptions. \n",
        "\n",
        "The reason we highlight the need for Netflix to improve the quality of their products is because the industry is reaching a point where cheap access to credit to finance acquisitions and pay premiums on content producers is coming under investor scrutiny (New York Times Events, 2022). In such an environment, Netflix will need to attain a higher rating per dollar spent and reduce the number of poor quality productions in order to sustain growth and compete with the plethora of streaming service providers joining the market. \n",
        "\n",
        "Netflix should continue to leverage and invest in its cloud database, which is far larger and more advanced than its competitors. For instance, Netflix analytics determined that viewers tend to finish watching David Fincher movies, and Kevin Spacey's movies tend to do well, so they invested in House of Cards, which garnered acclaim for the streaming service. This is one example of how they have managed to identify the right content to create. Ultimately, this is Netlfix comeptitive advantage in efficient content creation to compete against the likes of Disney whom have well known content that they can continue to recycle for decades to come (Macker, 2022)."
      ],
      "metadata": {
        "id": "zH8Cv-rD6Y_5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "FSolbxD8dqVf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Summary and Conclusions"
      ],
      "metadata": {
        "id": "5-cplvgrryu_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now more than ever, every form of entertainment is vying for the attention of the consumer. Not only are streaming services competing with each other, but also in competition with non traditional platforms such as YouTube, Twitch, TikTok. Eyes and views are some of the most important metrics that a service can provide. There is more content readily available than ever before in history. Consumers are experiencing a great content overload, with many not knowing where to spend their money on a subscription fee. Spending money efficiently on purchasing existing content and creating new originals is going to crucial to the success of the streaming platforms moving forward. As the industry continues to evolve and slowly condense, as seen through mergers and acquisitions, having the right content on ones platform will be one of the deciding factor in its success.\n",
        "\n",
        "\n",
        "The goal of our analysis was to help Netflix regain their lost subscribers and improve their content strategy to fight off competition. We set out to answer three questions: What content types should Netflix focus on? What genres should they create more of? How can Netflix improve their average ratings, runtimes, and IMD score to compete with its biggest competitors ? Through our data analysis and data visualizations, we concluded that (1) shorts, TV movies, and TV series are the content types to make, (2) documentary and crime are the genres to use, and (3) quality content with runtimes around 120 minutes will improve Netflix's content strategy.\n"
      ],
      "metadata": {
        "id": "CJrpvPymccWE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Challenges: The most difficult challenges of our analysis arose during the data cleaning and merging phase. Cleaning a 34 million row dataset caused our computers to constantly crash. We lost lots of records in the merge as movie titles that were slightly different were not identified as the same. Lastly, our dataset lacked quantitative variables, which gave us the opportunity to create our own calculations.  \n"
      ],
      "metadata": {
        "id": "OJZ4qHUjgpM2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "One thing we think could have made our analysis better would be the addition of financial data such as revenue from each of the streaming services. We were hoping to find the most profitable genres and content types to recommend to Netflix. We plan on continuing to work on this dataset after this class to continue to improve our skills and build up our portfolio!"
      ],
      "metadata": {
        "id": "kCcX4KdKgtJv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Bibliography"
      ],
      "metadata": {
        "id": "bvCV1jR1sAJl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Bansal, S. (2021, September 27). Netflix movies and TV shows. Kaggle. Retrieved from https://www.kaggle.com/datasets/shivamb/netflix-shows \n",
        "\n",
        "IMDb.com (n.d.). IMDb data files available for download. IMDb. Retrieved from https://datasets.imdbws.com/ \n",
        "\n",
        "\n",
        "IMDb.com. (n.d.). IMDb Datasets. IMDb. Retrieved from https://www.imdb.com/interfaces/\n",
        "\n",
        "Macker, N. (2022). Netflix Rebounds From Subscriber Losses; Raising FVE to $290. Morningstar Investment Research. Retrieved December 11, 2022, from https://ar-morningstar-com.electra.lmu.edu/mirc/equity/sal.aspx?s=200100CTXA#Morningstar_Report. \n",
        "\n",
        "New York Times Events. (2022). Where Does Netflix Go from Here? With C.E.O. Reed Hastings. YouTube. Retrieved from https://www.youtube.com/watch?v=mWz9q1hC2_w&amp;t=558s. \n",
        "\n",
        "Netflix 10k 2021\n",
        "https://www.sec.gov/ix?doc=/Archives/edgar/data/0001065280/000106528022000036/nflx-20211231.htm#i6247e85bf60945eebf3a8edf21e717c5_13\n",
        "\n",
        "Sherman, A. (2022, July 7). Hulu is facing an existential crisis as Disney approaches a 2024 deadline to buy Comcast's 33% stake. CNBC. Retrieved December 11, 2022, from https://www.cnbc.com/2022/07/06/hulu-faces-existential-crisis-as-disney-decides-how-to-move-forward.html "
      ],
      "metadata": {
        "id": "L62lWYDh6eRZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Appendix"
      ],
      "metadata": {
        "id": "zKUGttwLsTsx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###***Struggles and Challenges***"
      ],
      "metadata": {
        "id": "T5DSxPeUeG8C"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dealing with the large dataset that we did, there was a great deal of issue when it came to RAM usage. Doing this project on Google Collab, it was only limited to what amount of data could be uploaded. Some of the indidivual Files were too large to be entirely uploaded into Collab. Because of this we needed to limit our RAM usage by first only uploading the columns that we needed. While this was a great help, it still had lots of issues when it came to creating actual analysis.\n",
        "\n",
        "Additionally there was a large number of records that were lost due to the inability to merge between the kaggle dataset. Because of the not fully complete data cleaning over ten thousands records were lost in the final merge with IMDB. As we continue this project we hope to include even more titles into our analysis.\n",
        "\n",
        "This analysis also did not account for any repeat films that were on multiple different platforms. I think there could be some further insights and analysis that could be done on those films alone.\n",
        "\n",
        "As mentioned earlier, another large portion that we would have loved to include was some of the financial data. With further time in the futurem this is something we plan to put more effort into researching. \n",
        "\n",
        "Additionally, there is the large topic of discussion on whether services should release episodes weekly one at a time or all at once. As this binge vs \"subscrption\" model is up for much debate, this is something we look to include with further research and analysis."
      ],
      "metadata": {
        "id": "7Cn16PJCetVq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Additional Visualizations\n"
      ],
      "metadata": {
        "id": "ISz6v27ReWbX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "This is a graphic of the top ten genres and a count of each of the number of genres per service. This was a reptative graph that was already presented when talked about the top 10 services. While we went into a deeper dive on each individual service it did not feel necessary to include this visual as well."
      ],
      "metadata": {
        "id": "UuiXnNZwl9B5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_netflix[df_netflix.columns[19:]].sum().nlargest(10).plot.bar(rot=40, color='Red')\n",
        "df_amazon[df_amazon.columns[19:]].sum().nlargest(10).plot.bar(rot=40, color='Yellow')\n",
        "df_hulu[df_hulu.columns[19:]].sum().nlargest(10).plot.bar(rot=40, color='Green')\n",
        "df_disney[df_disney.columns[19:]].sum().nlargest(10).plot.bar(rot=40, color='Blue')\n",
        "\n",
        "plt.legend([\"Netflix\",\"Amazon\",\"Hulu\",\"Disney\"])\n",
        "plt.title('Most Popular Genres')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 323
        },
        "id": "0aqMPa3h6ihi",
        "outputId": "6e183e2d-1710-4e92-a950-526bd982ba08"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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51+yZAknnngiEydOZLvttuPqq6/Oj+B1QMpACCFWwTnnnLNCVtG1117LtGnT6N27Nz169ODGG28E4MADD2TSpEmVAeSacPnll9O/f3/69evH1VdfzS233MKsWbMKch2ro6S/gVxRUeGr/Z5BPrKBSvgeCLGuMWvWLLbbbrtii7HGUN39MrPp7l5Rm/PIMhBCCCFlIIQQQspACCEEUgZCCCGQMhBCCIGUgRBCCKQMhBCiWv7whz9gZrz22mvFFqVBkDIQQpQ4lue/mjFx4kT69evHxIkT83UhJY2UgRBCVOHzzz/nySefZOzYsdx5551AfK9gjz32YPDgwWyxxRaMHDmSO+64g759+9KrVy/mzJkDwB//+MfKj9rss88+vPvuuwDsv//+lJeXU15eTps2bZgwYQJffvklw4YNo1evXuy444489thjAIwfP55DDz2UQYMG0b1796/NnFoIpAyEEKIK999/P4MGDWLrrbemXbt2TJ8+HYB//OMf3HjjjcyaNYvbb7+d119/neeff56TTz65cr6ifv368eyzz/Liiy8yZMgQrrjiCgCmTJnCjBkzGDt2LJtvvjkHH3wwo0ePxsx4+eWXmThxIkOHDq38pvGMGTO46667ePnll7nrrruYP39+Qa9ZykAIIaowceJEhgwZAsCQIUMqXUV9+vShY8eONG/enC233JIBAwYA0KtXL+bOnQvELKQDBw6kV69e/OpXv+LVV1+tPO/777/Pcccdx+9+9zvatGnDk08+ybHHHgvAtttuy+abb87rr78OwN57702bNm0oKyujR48ezJs3r6DXrCmshRAiw4cffsijjz7Kyy+/jJmxdOlSzIxvf/vbNG/evHK/Ro0aVa43atSIJUuWAHD66adz9tlnc9BBBzF16tTKbycvXbqUIUOG8LOf/YyePXuuVo5sXY0bN648f6GQZSCEEBnuuecejjvuOObNm8fcuXOZP38+3bp1q/FMpJ988gmdOnUCYMKECZXlI0eOpHfv3pUWB0D//v254447AHj99dd566232GabbfJ4NTVHykAIITJMnDiRQw45ZIWyww47rMZZRRdeeCFHHHEEO++8M+3bt68sv/LKK3nooYcqg8iTJ0/m+9//PsuWLaNXr1585zvfYfz48StYBA2JprAGTWEtRAmhKaxrh6awFkIIkTekDIQQQkgZCCGEqIEy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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We looked into using our created variable of IMDB Score (Average Rating x Number of Votes). One of the ideas was using this against something like runtime. However, somethings like TV shows were listed in the total minutes of the show added up. This skewed and messed with the analysis of something like the chart provided below."
      ],
      "metadata": {
        "id": "xNJQf9qjx5jO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "movie_ind = pd.read_csv(\"master_dataset.csv\", parse_dates=['date_added'],\n",
        "                        index_col=['date_added'], na_values=(['na','NA']))\n",
        "\n",
        "movie_ind.head()\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "\n",
        "ax.scatter(movie_ind.runtimeMinutes, movie_ind.IMDBScore, c=movie_ind.index)\n",
        "ax.set_xlabel(\"Runtime (Minutes)\")\n",
        "ax.set_ylabel(\"IMDB score\")\n",
        "ax.get_legend_handles_labels()\n",
        "ax.set_title('IMDB score versus Runtime over time')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "FdmCLFsv6n1Y",
        "outputId": "68cb4f26-79b4-464d-8ada-0403274425ef"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}
